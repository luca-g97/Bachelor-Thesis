<!DOCTYPE html>
<html><head>
    <meta http-equiv="content-type" content="text/html; charset=UTF-8"><meta name="viewport" content="width=device-width"><title>file:///C:/Users/geige/Downloads/CommandProcessor.htm</title><link rel="stylesheet" type="text/css" href="../../../view.css"></head><body id="viewsource" class="wrap highlight" style="tab-size: 4; background-color: #1C1B22"><pre id="line1"><span style="color: whitesmoke; background-color: #1C1B22"><span></span><span class="doctype">&lt;!DOCTYPE html&gt;</span><span>
<span id="line2"></span></span><span>&lt;<span class="start-tag">html</span>&gt;</span><span>
<span id="line3"></span></span><span>&lt;<span class="start-tag">head</span>&gt;</span><span>
<span id="line4"></span> </span><span>&lt;<span class="start-tag">meta</span> <span class="attribute-name">http-equiv</span>="<a class="attribute-value">content-type</a>" <span class="attribute-name">content</span>="<a class="attribute-value">text/html; charset=utf-8</a>"<span>/</span>&gt;</span><span>
<span id="line5"></span> </span><span>&lt;<span class="start-tag">title</span>&gt;</span><span></span><span>&lt;/<span class="end-tag">title</span>&gt;</span><span>
<span id="line6"></span> </span><span>&lt;<span class="start-tag">meta</span> <span class="attribute-name">name</span>="<a class="attribute-value">generator</a>" <span class="attribute-name">content</span>="<a class="attribute-value">LibreOffice 7.4.3.2 (Linux)</a>"<span>/</span>&gt;</span><span>
<span id="line7"></span> </span><span>&lt;<span class="start-tag">meta</span> <span class="attribute-name">name</span>="<a class="attribute-value">created</a>" <span class="attribute-name">content</span>="<a class="attribute-value">00:00:00</a>"<span>/</span>&gt;</span><span>
<span id="line8"></span> </span><span>&lt;<span class="start-tag">meta</span> <span class="attribute-name">name</span>="<a class="attribute-value">changed</a>" <span class="attribute-name">content</span>="<a class="attribute-value">00:00:00</a>"<span>/</span>&gt;</span><span>
<span id="line9"></span> </span><span>&lt;<span class="start-tag">style</span> <span class="attribute-name">type</span>="<a class="attribute-value">text/css</a>"&gt;</span><span>
<span id="line10"></span> @page { size: 8.27in 11.69in; margin: 0.79in }
<span id="line11"></span> p { line-height: 115%; margin-bottom: 0.1in; background: transparent }
<span id="line12"></span> pre { background: transparent }
<span id="line13"></span> pre.western { font-family: "Liberation Mono", monospace; font-size: 10pt }
<span id="line14"></span> pre.cjk { font-family: "NSimSun", monospace; font-size: 10pt }
<span id="line15"></span> pre.ctl { font-family: "Liberation Mono", monospace; font-size: 10pt }
<span id="line16"></span> </span><span>&lt;/<span class="end-tag">style</span>&gt;</span><span>
<span id="line17"></span></span><span>&lt;/<span class="end-tag">head</span>&gt;</span><span>
<span id="line18"></span></span><span>&lt;<span class="start-tag">body</span> <span class="attribute-name">lang</span>="<a class="attribute-value">en-US</a>" <span class="attribute-name">link</span>="<a class="attribute-value">#000080</a>" <span class="attribute-name">vlink</span>="<a class="attribute-value">#800000</a>" <span class="attribute-name">dir</span>="<a class="attribute-value">ltr</a>"&gt;</span><span></span><span>&lt;<span class="start-tag">pre</span> <span class="attribute-name">class</span>="<a class="attribute-value">western</a>"&gt;</span><span><span class="entity"><span>&amp;</span>lt;</span>?php
<span id="line19"></span> //Set globally used variables
<span id="line20"></span> $action = $_GET['action'];
<span id="line21"></span> $SecurityLevel = $_GET['securityLevel'];
<span id="line22"></span>
<span id="line23"></span> //Change config to the right one according to the securityLevel before executing any task!
<span id="line24"></span> //Remove all files in directory conf.d, copy the config file with the wanted security level into the folder and restart nginx using this config
<span id="line25"></span> exec(rm /etc/nginx/conf.d/* && cp /etc/nginx/Config/$SecurityLevel.conf /etc/nginx/conf.d/ && nginx -s reload);
<span id="line26"></span> 
<span id="line27"></span> //BrokenAccessControl/Vulnerabilities/AutoIndex.htm -> Change Config
<span id="line28"></span> if($action === "LoadConfig") {
<span id="line29"></span> header("Location: ./BrokenAccessControl/$SecurityLevel/Netflix.htm", true, false);
<span id="line30"></span> 
<span id="line31"></span> <span style="font-weight: bold"> //BrokenAccessControl/Secure/NetflixLogin.htm -> Check password</span>
<span id="line32"></span> <span style="font-weight: bold"> }else if($action === "CheckLoginCredentials") {</span>
<span id="line33"></span> <span style="color: lawngreen; font-weight: bold"> if ($_GET['user'] === "test@bac" && $_GET['password'] === "test") {</span>
<span id="line34"></span> <span style="font-weight: bold"> header("Location: ./BrokenAccessControl/Secure/NetflixUserChoice.htm", true, false);</span>
<span id="line35"></span> <span style="color: lawngreen; font-weight: bold">}else if($_GET['user'] === "admin" && $_GET['password'] === "admin") {</span>
<span id="line36"></span> <span style="font-weight: bold">header("Location: /root");</span>
<span id="line37"></span> <span style="font-weight: bold"> } else {</span>
<span id="line38"></span> <span style="font-weight: bold"> header("Location: ./BrokenAccessControl/Secure/NetflixLogin.htm", true, false);</span>
<span id="line39"></span> <span style="font-weight: bold"> }</span>
<span id="line40"></span>
<span id="line41"></span> //BrokenAccessControl/$SecurityLevel/NetflixUserChoice.htm
<span id="line42"></span> <span style="font-weight: bold">}else if($action === "CheckUserIdentity"){</span>
<span id="line43"></span> <span style="color: yellow; font-weight: bold">if(base64_decode($_GET['u']) === "admin" && base64_decode($_GET['p']) === "admin") {</span>
<span id="line44"></span> <span style="font-weight: bold">header("Location: /root");</span>
<span id="line45"></span> <span style="font-weight: bold">} else {</span>
<span id="line46"></span> <span style="font-weight: bold">header("Location: ./BrokenAccessControl/$SecurityLevel/NetflixUserChoice.htm?u=" . $_GET['u'] . "p=" . $_GET['p'], true, false);</span>
<span id="line47"></span> <span style="font-weight: bold">}</span>
<span id="line48"></span> 
<span id="line49"></span>//Database/$SecurityLevel/DatabaseLogin.htm -> Check for correct password
<span id="line50"></span> }else if($action === "CheckDataBaseLogin") {
<span id="line51"></span> $result = checkLoginCredentials($_GET['username'], $_GET['password'], $SecurityLevel);
<span id="line52"></span> if($SecurityLevel === "Vulnerable") {
<span id="line53"></span> printf("No entry found for Username='" . $_GET['username'] . "' and Loginpassword='" . $_GET['password'] . "' in Table UserLoginData!\n Your request found the following though: $result. \nDid you mean to search in Table Admin, UserPreferences or ExampleTable instead?);
<span id="line54"></span> }else{
<span id="line55"></span> printf("No entry found for " . $_GET['username'] .  " and " . $_GET['password'] . ". Please try again with different login data!);
<span id="line56"></span> }
<span id="line57"></span> checkAuthorization($_GET['username'], $_GET['password'], $SecurityLevel);
<span id="line58"></span> 
<span id="line59"></span> //Database/$SecurityLevel/Database.php -> Execute SQL Statement
<span id="line60"></span> }else if($action === "ExecuteSQLStatement") {
<span id="line61"></span> $statement = $_GET['statement'];
<span id="line62"></span> if ($SecurityLevel === "Secure") {
<span id="line63"></span> $result = getPreparedStatementResult($statement);
<span id="line64"></span> } else //$SecurityLevel = Vulnerable
<span id="line65"></span> {
<span id="line66"></span> exec("sqlite3 ./Database/$SecurityLevel/UserData \$statement\ > ./Database/$SecurityLevel/CommandProcessorOutput/temp.html");
<span id="line67"></span> $result = htmlentities(readThisFile("./Database/$SecurityLevel/CommandProcessorOutput/temp.html"));
<span id="line68"></span> exec("rm ./Database/$SecurityLevel/CommandProcessorOutput/temp.html");
<span id="line69"></span> }
<span id="line70"></span>
<span id="line71"></span> createTable($result, $SecurityLevel);
<span id="line72"></span> header("Location: ./Database/$SecurityLevel/DatabasePassword.htm", true, false);
<span id="line73"></span> }
<span id="line74"></span> 
<span id="line75"></span> function checkAuthorization($username, $password, $SecurityLevel)
<span id="line76"></span> {
<span id="line77"></span> if ($username === "test" && $password === "NoChanceMr.Hacker!123") {
<span id="line78"></span> header("Location: ./Database/$SecurityLevel/Database.htm", true, false);
<span id="line79"></span> }else if ($username === "admin" && $password === "GiveUp!Y0uWillN3verF!ndOutS1nceThisIsTo0Long!!!"){
<span id="line80"></span> exec("sqlite3 ./Database/$SecurityLevel/UserData \"select Databasepassword from Admin where Username=$username and Loginpassword= $password\" > ./Database/$SecurityLevel/output.txt");
<span id="line81"></span> $result = readThisFile("./Database/$SecurityLevel/output.txt");
<span id="line82"></span> exec("rm ./Database/$SecurityLevel/output.txt");
<span id="line83"></span> header("Location: ./Database/$SecurityLevel/Database.php?password=$result&remember=true", true, false);
<span id="line84"></span> } else {
<span id="line85"></span> printf("You will be redirected to the login page in 10 seconds!");
<span id="line86"></span> header("refresh: 10; ./Database/$SecurityLevel/DatabaseLogin.htm", true, false);
<span id="line87"></span> }
<span id="line88"></span> }
<span id="line89"></span> 
<span id="line90"></span> function readThisFile($filename)
<span id="line91"></span> {
<span id="line92"></span> $readLines = "";
<span id="line93"></span> 
<span id="line94"></span> $file = fopen($filename, "r") or die("Unable to open file!");
<span id="line95"></span> 
<span id="line96"></span> // Output one line until end-of-file
<span id="line97"></span> while(!feof($file)) {
<span id="line98"></span> $readLines .= fgets($file);
<span id="line99"></span> }
<span id="line100"></span> fclose($file);
<span id="line101"></span> return $readLines;
<span id="line102"></span> }
<span id="line103"></span> 
<span id="line104"></span>function checkLoginCredentials($username, $password, $SecurityLevel)
<span id="line105"></span> {
<span id="line106"></span> $db = new SQLite3("./Database/$SecurityLevel/UserData");
<span id="line107"></span> 
<span id="line108"></span> if($SecurityLevel === "Vulnerable")
<span id="line109"></span> {
<span id="line110"></span> $sqlString = "SELECT * FROM UserLoginData WHERE Username = '$username' AND Loginpassword = '$password'";
<span id="line111"></span> exec("sqlite3 ./Database/$SecurityLevel/UserData \"$sqlString\" > ./Database/$SecurityLevel/CommandProcessorOutput/output.txt");
<span id="line112"></span> $result = readThisFile("./Database/$SecurityLevel/CommandProcessorOutput/output.txt");
<span id="line113"></span> exec("rm ./Database/$SecurityLevel/CommandProcessorOutput/output.txt");
<span id="line114"></span> 
<span id="line115"></span> }else{ //$SecurityLevel = "Secure"
<span id="line116"></span> $preparedStatement = $db->prepare("SELECT * FROM UserLoginData WHERE Username = :username AND Loginpassword = :password");
<span id="line117"></span> $preparedStatement->bindParam(':username', $username);
<span id="line118"></span> $preparedStatement->bindParam(':password', $password);
<span id="line119"></span>
<span id="line120"></span> $result = executePreparedStatement($preparedStatement);
<span id="line121"></span> }
<span id="line122"></span> 
<span id="line123"></span> return $result;
<span id="line124"></span> }
<span id="line125"></span> 
<span id="line126"></span> function getPreparedStatementResult($statement): string
<span id="line127"></span> {
<span id="line128"></span> $statementLowerCase = strtolower($statement);
<span id="line129"></span> 
<span id="line130"></span> //Search for "insert" in the given string -> if it is not included it would return 0 (bool: false), as well as "insert" is included since it is at the start of string
<span id="line131"></span> //Therefore "ert" is used to be sure it really means insert and not just "not found"
<span id="line132"></span> if(strpos($statementLowerCase, "ert") === 3)
<span id="line133"></span> {
<span id="line134"></span> $db = new SQLite3("./Database/Secure/UserData");
<span id="line135"></span>
<span id="line136"></span> $preparedStatement = $db->prepare("insert into ExampleTable (firstname, lastname, email) values (:firstname, :lastname, :email)");
<span id="line137"></span> $preparedStatement->bindParam(':firstname', $firstname);
<span id="line138"></span> $preparedStatement->bindParam(':lastname', $lastname);
<span id="line139"></span> $preparedStatement->bindParam(':email', $email);
<span id="line140"></span> 
<span id="line141"></span> //Get Startposition of valuestring - only this begins with (' -> exclude the (
<span id="line142"></span> $startPosition = strpos($statement, "('")+1;
<span id="line143"></span> //Get Endposition of valuestring - it always ends with ') -> exclude the )
<span id="line144"></span> $endPosition = strpos($statement, "')")+1;
<span id="line145"></span> //Create the valuestring by cutting the statement string at the defined positions
<span id="line146"></span> $valueString = substr($statement, $startPosition, $endPosition-$startPosition);
<span id="line147"></span> 
<span id="line148"></span> //Save the first and the last part of the query to build the complete string afterwards
<span id="line149"></span> //$firstPartOfQuery = substr($statement, 0, strpos($statement, "('")+1);
<span id="line150"></span> //$secondPartOfQuery = substr($statement, strpos($statement, "')")+1);
<span id="line151"></span> 
<span id="line152"></span> //Create an array of values by cutting the valuestring in 3 parts -> 3 parameters
<span id="line153"></span> $values = explode(",", $valueString);
<span id="line154"></span> $firstname = $values[0];
<span id="line155"></span> $lastname = $values[1];
<span id="line156"></span> $email = $values[2];
<span id="line157"></span> 
<span id="line158"></span> return executePreparedStatement($preparedStatement);
<span id="line159"></span> }
<span id="line160"></span> return "";
<span id="line161"></span> }
<span id="line162"></span> 
<span id="line163"></span> function executePreparedStatement($preparedStatement): string
<span id="line164"></span> {
<span id="line165"></span> $result = "";
<span id="line166"></span> $preparedResult = $preparedStatement->execute();
<span id="line167"></span> while($row=$preparedResult->fetchArray()){
<span id="line168"></span> for($i = 0; $i < count($row); $i++)
<span id="line169"></span> {
<span id="line170"></span> if($row[$i] != null) {
<span id="line171"></span> $result .= htmlentities($row[$i]) . "|";
<span id="line172"></span> }
<span id="line173"></span> }
<span id="line174"></span> }
<span id="line175"></span> 
<span id="line176"></span> //Return the created string without the last "|", to get everything into the same format
<span id="line177"></span> return rtrim($result);
<span id="line178"></span> }
<span id="line179"></span> 
<span id="line180"></span> function createTable($result, $SecurityLevel){
<span id="line181"></span> 
<span id="line182"></span> //Get everything from ExampleTable and write it into output.html to build a table out of it
<span id="line183"></span> exec("sqlite3 ./Database/$SecurityLevel/UserData \"select * from ExampleTable\" > ./Database/$SecurityLevel/CommandProcessorOutput/output.html");
<span id="line184"></span> $readFile = readThisFile("./Database/$SecurityLevel/CommandProcessorOutput/output.html");
<span id="line185"></span> 
<span id="line186"></span> //Bring the read lines all to the same format and seperate them into their parts to build a good looking table in the next step 
<span id="line187"></span> $tableRows = str_replace("\n", "|", $readFile);
<span id="line188"></span> $tableItems = explode("|", $tableRows);
<span id="line189"></span> 
<span id="line190"></span> //
<span id="line191"></span> $tableString = "<span class="entity"><span>&amp;</span>lt;</span>head><span class="entity"><span>&amp;</span>lt;</span>style>table{ margin: auto; border: 3px solid lightgrey; width: 100%; padding: 3%; font-family: 'Open Sans',sans-serif; border-radius: 5px} tr, th{color: lightgrey; text-align: center} tr:nth-child(even) { background-color: #333333; } div{padding: 10px; border: lightgrey solid 3px; color: lightgrey; text-align: center; background-color: #222222; font-family: 'Open Sans',sans-serif; border-radius: 5px;}<span class="entity"><span>&amp;</span>lt;</span>/style><span class="entity"><span>&amp;</span>lt;</span>/head>";
<span id="line192"></span> $tableString .= "<span class="entity"><span>&amp;</span>lt;</span>body><span class="entity"><span>&amp;</span>lt;</span>div><span class="entity"><span>&amp;</span>lt;</span>b>The result of your last request was: $result<span class="entity"><span>&amp;</span>lt;</span>/b><span class="entity"><span>&amp;</span>lt;</span>/div><span class="entity"><span>&amp;</span>lt;</span>table><span class="entity"><span>&amp;</span>lt;</span>tr><span class="entity"><span>&amp;</span>lt;</span>th>firstname<span class="entity"><span>&amp;</span>lt;</span>/th><span class="entity"><span>&amp;</span>lt;</span>th>lastname<span class="entity"><span>&amp;</span>lt;</span>/th><span class="entity"><span>&amp;</span>lt;</span>th>email<span class="entity"><span>&amp;</span>lt;</span>/th><span class="entity"><span>&amp;</span>lt;</span>/tr>";
<span id="line193"></span> 
<span id="line194"></span> 
<span id="line195"></span> for ($i = 0; $i <span class="entity"><span>&amp;</span>lt;</span> count($tableItems); $i++) {
<span id="line196"></span> if (($i % 3) === 0)
<span id="line197"></span> {
<span id="line198"></span> $tableString .= "<span class="entity"><span>&amp;</span>lt;</span>tr>";
<span id="line199"></span> }
<span id="line200"></span> $tableItem = $tableItems[$i];
<span id="line201"></span> 
<span id="line202"></span> if($SecurityLevel == "Secure")
<span id="line203"></span> {
<span id="line204"></span> $tableItem = htmlentities($tableItems[$i]); 
<span id="line205"></span> }
<span id="line206"></span> 
<span id="line207"></span> $tableString .= "<span class="entity"><span>&amp;</span>lt;</span>td>" . $tableItem . "<span class="entity"><span>&amp;</span>lt;</span>/td>";
<span id="line208"></span> if (($i % 3) === 2)
<span id="line209"></span> {
<span id="line210"></span> $tableString .= "<span class="entity"><span>&amp;</span>lt;</span>/tr>";
<span id="line211"></span> }
<span id="line212"></span> }
<span id="line213"></span> 
<span id="line214"></span> $tableString .= "<span class="entity"><span>&amp;</span>lt;</span>/table><span class="entity"><span>&amp;</span>lt;</span>/body>";
<span id="line215"></span> 
<span id="line216"></span> exec("echo \"$tableString\" > ./Database/$SecurityLevel/CommandProcessorOutput/output.html");
<span id="line217"></span> }
<span id="line218"></span>?></span><span>&lt;/<span class="end-tag">pre</span>&gt;</span><span>
<span id="line219"></span></span><span>&lt;/<span class="end-tag">body</span>&gt;</span><span>
<span id="line220"></span></span><span>&lt;/<span class="end-tag">html</span>&gt;</span><span></span></span></pre></body></html>