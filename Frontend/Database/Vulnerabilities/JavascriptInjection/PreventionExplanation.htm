<!DOCTYPE html>
<html lang="en"><head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Add an icon library -->
    <script src="https://unpkg.com/feather-icons"></script>
    <title>Problem</title>
    <style>
        .title{
            background-color: #111111;
            border-radius: 5px;
            padding: 1%;
        }
        .body{
            background-color: #222222;
            text-align: center;
            color: lightgrey;
            font-family: 'Open Sans',sans-serif;
        }
        .explanationContainer {
            font-size: 1.3em;
            padding: 1%;
            width: 93%;
            color: lightgrey;
            border: 10px solid #151515;
            border-radius: 5px;
            background-color: #111111
        }
        .explanationInformation{
            font-size: 1.1em;
            color: whitesmoke;
            padding: 1%;
        }
        .information{
            position: relative;
            left: 5%;
            width: 90%;
            text-align: left;
            hyphens: auto;
            word-wrap: break-word;
            letter-spacing: .04em;
        }
        .informationLink{
            color: lightsteelblue;
            font-weight: bold;
        }
        .websiteName{
            background-color: black;
            padding: 2%;
            margin: 2%;
            color: darkgrey;
            border-radius: 10px;
        }
        .switchSite:hover{
            background-color: #333333;
        }
        .switchSite {
            opacity: 0.8;
            background-color: black;
            padding: 2%;
            font-size: 0.9em;
            margin: 3%;
            border-radius: 10px;
            cursor: pointer;
            color: whitesmoke;
            font-weight: bold;
            border: 3px solid orangered;
        }
        .feather{
            width: 7%;
            vertical-align: bottom;
            color: dimgrey;
        }
    </style>
</head>
<body class="body">
<div>
    <h2 id="0" class="title"><br></h2>
    <p id="1" class="information"></p>
    <div class="explanationContainer">
        <p id="2" class="explanationInformation"></p>
        <div class="websiteName">CommandProcessor.php # line204<embed src="../Views/CommandProcessor.htm#line194" type="text/html" width="100%" height="400px" style="text-align: left; white-space: normal; text-wrap: none"></div>
        <button id="4" class="switchSite" onclick="window.open('../../../CommandProcessor.php?action=ChangeWebsite&website=Database/Secure/Database.htm')"></button>
    </div>
    <p id="3" class="information"></p>
</div>
<script>
    var german = ["Javascript-Injection", "", "<b>Wie kann man diese Lücke bereits vorab verhindern?</b>", "<i class='feather' data-feather='compass' style=\"color: whitesmoke\"></i>&nbsp;&nbsp;&nbsp;<b>Weiterführende Informationen:</b><br><br>Da die meistgenutze JavaScript-Injection Cross-Site-Scripting (Einführung von JavaScript in eine andere Webseite, auch bekannt als XSS) ist, sind die nachfolgenden Informationen speziell auf dies zugeschnitten. Die XSS Verhinderungs Philosophie von OWASP (Zusammenschluss von Sicherheitsexperten) sieht vor, dass jede Variable validiert werden sollte um die höchstmögliche Sicherheit zu gewährleisten. Da heutzutage allerdings Frameworks (vorgefertigte implementierbare Programme) häufig als Grundlage einer Applikation genutzt werden, müssen die Lücken nicht zwingend in der Applikation selbst sein.<br><br>Die Verhinderung aller Sicherheitslücken ist nicht trivial, da es verschiedene Lesemethoden innerhalb von Browsern gibt, die unterschiedlich funktionieren (z.B. CSS und HTML) und nur die richtige Variante diese schützen kann. Sanitization (Erstellung einer neuen Seite unter Eliminierung aller unsicheren Tags im HTML) und Safe Sinks (sichere HTML-Attribute) tragen ebenfalls zur Sicherheit bei, da beide Eingaben, Parametern und Variablen immer als nicht ausführbaren Text interpretieren. <a href='https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html' class='informationLink'>(CheatSheets Series Team, 2021)</a>",
        "<i class='feather' data-feather='external-link' style=\"color: whitesmoke\"></i> &nbsp ÖFFNE SICHERE WEBSITE"];

    var english = ["Javascript Injection", "", "<b>How can it be avoided beforehand?</b>", "<i class='feather' data-feather='compass' style=\"color: whitesmoke\"></i>&nbsp;&nbsp;&nbsp;<b>Further Information:</b><br><br>Since the most used case of JavaScript Injection is Cross-Site-Scripting (XSS), the best practices are especially for this case. The XSS Defense Philosophy of OWASP states, that every variable needs to be validated, to guarantee the highest resistance possible. But especially those days, frameworks are used everywhere, which might have unvalidated variables that can cause harm as well.<br><br>The procedure to avoid all types of weaknesses is not trivial, since “[t]here are many different output encoding methods [available, ] because browsers parse HTML, JS, URLs, and CSS differently” and only the right one can eliminate them. Sanitization is also a good choice, together with Safe Sinks. Both methods treat inputs, parameters and variables always as text and not as executable and keep therefore security regarding JavaScript Injection in all cases. <a href='https://cheatsheetseries.owasp.org/cheatsheets/Cross_Site_Scripting_Prevention_Cheat_Sheet.html' class='informationLink'>(CheatSheets Series Team, 2021)</a>",
        "<i class='feather' data-feather='external-link' style=\"color: whitesmoke\"></i> &nbsp OPEN SECURE WEBSITE"];

    var languageToUse = english;
    if (localStorage.getItem("language") === "German")
    {
        languageToUse = german;
    }

    for (var i = 0; i < 5; i++)
    {
        document.getElementById(i.toString()).innerHTML = languageToUse[i];
    }

    //Replace the icons with svgs
    feather.replace();
</script>
</body>
</html>