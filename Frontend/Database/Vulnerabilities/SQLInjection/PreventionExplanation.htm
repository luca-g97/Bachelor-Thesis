<!DOCTYPE html>
<html lang="en"><head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
    <!-- Add an icon library -->
    <script src="https://unpkg.com/feather-icons"></script>
    <title>Problem</title>
    <style>
        .title{
            background-color: #111111;
            border-radius: 5px;
            padding: 1%;
        }
        .body{
            background-color: #222222;
            text-align: center;
            color: lightgrey;
            font-family: 'Open Sans',sans-serif;
        }
        .explanationContainer {
            font-size: 1.3em;
            padding: 1%;
            width: 93%;
            color: lightgrey;
            border: 10px solid #151515;
            border-radius: 5px;
            background-color: #111111
        }
        .explanationInformation{
            font-size: 1.1em;
            color: whitesmoke;
            padding: 1%;
        }
        .information{
            position: relative;
            left: 5%;
            width: 90%;
            text-align: left;
            hyphens: auto;
            word-wrap: break-word;
            letter-spacing: .04em;
        }
        .informationLink{
            color: lightsteelblue;
            font-weight: bold;
        }
        .websiteName{
            background-color: black;
            padding: 2%;
            margin: 2%;
            color: darkgrey;
            border-radius: 10px;
        }
        .switchSite:hover{
            background-color: #333333;
        }
        .switchSite {
            opacity: 0.8;
            background-color: black;
            padding: 2%;
            font-size: 0.9em;
            margin: 3%;
            border-radius: 10px;
            cursor: pointer;
            color: whitesmoke;
            font-weight: bold;
            border: 3px solid orangered;
        }
        .feather{
            width: 7%;
            vertical-align: bottom;
            color: dimgrey;
        }
    </style>
</head>
<body class="body">
<div>
    <h2 id="0" class="title"><br></h2>
    <p id="1" class="information"></p>
    <div class="explanationContainer">
        <p id="2" class="explanationInformation"></p>
        <div class="websiteName">CommandProcessor.php # line51<embed src="../Views/CommandProcessor.htm#line50" type="text/html" width="100%" height="100px" style="text-align: left; white-space: normal; text-wrap: none"></div>
        <div class="websiteName">CommandProcessor.php # line115ff<embed src="../Views/CommandProcessor.htm#line115" type="text/html" width="100%" height="200px" style="text-align: left; white-space: normal; text-wrap: none"></div>
        <div class="websiteName">CommandProcessor.php # line63<embed src="../Views/CommandProcessor.htm#line60" type="text/html" width="100%" height="200px" style="text-align: left; white-space: normal; text-wrap: none"></div>
        <div class="websiteName">CommandProcessor.php # line134ff<embed src="../Views/CommandProcessor.htm#line131" type="text/html" width="100%" height="400px" style="text-align: left; white-space: normal; text-wrap: none"></div>
        <div class="websiteName">CommandProcessor.php # line166<embed src="../Views/CommandProcessor.htm#line163" type="text/html" width="100%" height="200px" style="text-align: left; white-space: normal; text-wrap: none"></div>
        <button id="4" class="switchSite" onclick="window.open('../../../CommandProcessor.php?action=ChangeWebsite&website=Database/Secure/DatabaseLogin.htm')"></button>
    </div>
    <p id="3" class="information"></p>
</div>
<script>
    var german = ["SQL-Injection", "", "<b>Wie kann man diese Lücke bereits vorab verhindern?</b>", "<i class='feather' data-feather='compass' style=\"color: whitesmoke\"></i>&nbsp;&nbsp;&nbsp;<b>Weiterführende Informationen:</b><br><br>Es gibt zahlreiche Optionen die Gefahr einer Datenbank-Injection zu minimieren, aber Prepared (vorbereitete) oder parametrisierte Statements (SQL Anfragen) sind verfügbar in allen Programmiersprachen und Datenbanktypen und daher immer die erste Verhinderungsmaßnahme.<br><br>Manchmal macht es jedoch Sinn, sogenannte Stored Procedures (Speicherungsprozesse) zu verwenden, da durch diese die Bearbeitung der Anfrage in der Datenbank erfolgt. Stored Procedures benötigen Rechte zum Ausführen der Anfrage innerhalb der Datenbank, sodass häufig die Rolle einfach auf db_owner (Datenbankeigentümer) gesetzt wird. Das ist jedoch extrem kritisch, da eine ausgenutzte Lücke dem Hacker volle Kontrolle über die Datenbank gibt.<br><br>Die nächste Möglichkeit ist eine Liste für erlaubten Input zu erstellen. Dies ist jedoch nicht zu empfehlen, da das Mapping (verknüpfen) von Nutzerparametern keine gute Lösung ist und eine Umschreibung der Prozedur erfolgen sollte um mögliche Lücken zu schließen.<br><br>Zu guter Letzt kann es nützlich sein, jede vom Nutzer stammende Eingabe zu escapen (nicht ausführbare Entities anstelle von ausführbaren Zeichen), allerdings ist nicht garantiert, dass alle Injection-Möglichkeiten dadurch verhindert werden <a href='https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html' class='informationLink'>(CheatSheets Series Team, 2021)</a>",
        "<i class='feather' data-feather='external-link' style=\"color: whitesmoke\"></i> &nbsp ÖFFNE SICHERE WEBSITE"];

    var english = ["SQL Injection", "", "<b>How can it be avoided beforehand?</b>", "<i class='feather' data-feather='compass' style=\"color: whitesmoke\"></i>&nbsp;&nbsp;&nbsp;<b>Further Information:</b><br><br>There are multiple more options, to minimize the risk of database injection, but prepared or parametrized statements are available in all languages and database types according to OWASP and therefore always the first defence measure.<br><br>Sometimes it makes sense to use Stored Procedures instead, since the handling of the request is done in the database as well. Stored Procedures require permission, which need execution rights to allow the database to check the request, so the role is simply set to db_owner in some databases. This is however extremely vulnerable, leading to full control over the database when a hacker can breach it. <br><br>The next option is to allow list input validation. This is not recommended, since the mapping of user parameters is more a workaround then a solution and a whole rewrite of the procedure should be done to close breaching options. <br><br>Lastly it can be useful to escape all user supplied input, but it can´t be guaranteed that all injection possibilities are prevented then. <a href='https://cheatsheetseries.owasp.org/cheatsheets/SQL_Injection_Prevention_Cheat_Sheet.html' class='informationLink'>(CheatSheets Series Team, 2021)</a>",
        "<i class='feather' data-feather='external-link' style=\"color: whitesmoke\"></i> &nbsp OPEN SECURE WEBSITE"];

    var languageToUse = english;
    if (localStorage.getItem("language") === "German")
    {
        languageToUse = german;
    }

    for (var i = 0; i < 5; i++)
    {
        document.getElementById(i.toString()).innerHTML = languageToUse[i];
    }

    //Replace the icons with svgs
    feather.replace();
</script>
</body>
</html>